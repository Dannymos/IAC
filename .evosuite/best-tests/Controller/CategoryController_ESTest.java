/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 22 16:58:54 GMT 2018
 */

package Controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Controller.CategoryController;
import Model.Category;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryController_ESTest extends CategoryController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CategoryController categoryController0 = new CategoryController();
      categoryController0.cdao = null;
      // Undeclared exception!
      try { 
        categoryController0.getSubCategories((-48));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.CategoryController", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CategoryController categoryController0 = new CategoryController();
      categoryController0.cdao = null;
      // Undeclared exception!
      try { 
        categoryController0.getMainCategories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.CategoryController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CategoryController categoryController0 = new CategoryController();
      categoryController0.cdao = null;
      // Undeclared exception!
      try { 
        categoryController0.getAllSubCategoriesList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.CategoryController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CategoryController categoryController0 = new CategoryController();
      categoryController0.cdao = null;
      Category category0 = new Category();
      // Undeclared exception!
      try { 
        categoryController0.addSubCategory(category0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.CategoryController", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CategoryController categoryController0 = new CategoryController();
      Category category0 = new Category();
      categoryController0.cdao = null;
      // Undeclared exception!
      try { 
        categoryController0.addMainCategory(category0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.CategoryController", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CategoryController categoryController0 = new CategoryController();
          ArrayList<Category> arrayList0 = categoryController0.getAllSubCategoriesList();
          assertTrue(arrayList0.isEmpty());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CategoryController categoryController0 = new CategoryController();
          Category category0 = new Category();
          boolean boolean0 = categoryController0.addSubCategory(category0, (-32735));
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CategoryController categoryController0 = new CategoryController();
          ArrayList<Category> arrayList0 = categoryController0.getSubCategories((-32735));
          assertEquals(0, arrayList0.size());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CategoryController categoryController0 = new CategoryController();
          Category category0 = new Category();
          boolean boolean0 = categoryController0.addMainCategory(category0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CategoryController categoryController0 = new CategoryController();
          ArrayList<Category> arrayList0 = categoryController0.getMainCategories();
          assertEquals(0, arrayList0.size());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
