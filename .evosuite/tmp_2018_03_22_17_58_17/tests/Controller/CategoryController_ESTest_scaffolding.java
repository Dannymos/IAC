/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Mar 22 16:58:54 GMT 2018
 */

package Controller;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

@EvoSuiteClassExclude
public class CategoryController_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  protected static ExecutorService executor; 

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "Controller.CategoryController"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    executor.shutdownNow(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "Cp1252"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "NL"); 
    java.lang.System.setProperty("user.language", "nl"); 
    java.lang.System.setProperty("user.timezone", "Europe/Berlin"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CategoryController_ESTest_scaffolding.class.getClassLoader() ,
      "org.postgresql.core.QueryExecutor",
      "Persistency.CategoryDAO",
      "org.postgresql.util.GT",
      "org.postgresql.util.HostSpec",
      "org.postgresql.hostchooser.HostRequirement",
      "org.postgresql.hostchooser.HostRequirement$4",
      "org.postgresql.util.PSQLException",
      "org.postgresql.core.Provider",
      "org.postgresql.util.ExpressionProperties",
      "org.json.JSONObject",
      "org.postgresql.core.v3.TypeTransferModeRegistry",
      "org.postgresql.util.SharedTimer",
      "org.postgresql.util.WriterHandler",
      "org.postgresql.core.BaseConnection",
      "org.postgresql.core.ResultHandler",
      "org.postgresql.core.ConnectionFactory",
      "org.postgresql.core.v3.ConnectionFactoryImpl",
      "org.postgresql.replication.PGReplicationConnection",
      "Controller.CategoryController",
      "org.postgresql.core.Version",
      "org.postgresql.jdbc.PgConnection",
      "org.postgresql.core.PGStream",
      "Model.Category",
      "Persistency.BaseDAO",
      "org.postgresql.hostchooser.HostChooserFactory",
      "org.postgresql.util.PSQLState",
      "org.postgresql.PGProperty",
      "org.postgresql.core.v3.ConnectionFactoryImpl$UnsupportedProtocolException",
      "org.postgresql.PGConnection",
      "org.postgresql.core.PGBindException",
      "org.postgresql.core.TypeInfo",
      "org.postgresql.hostchooser.SingleHostChooser",
      "org.postgresql.hostchooser.HostChooser",
      "org.postgresql.Driver$1",
      "org.postgresql.core.SocketFactoryFactory",
      "org.postgresql.core.PGStream$1",
      "org.postgresql.hostchooser.HostStatus",
      "org.postgresql.hostchooser.HostRequirement$2",
      "org.postgresql.hostchooser.HostRequirement$3",
      "org.postgresql.hostchooser.HostRequirement$1",
      "org.postgresql.Driver"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CategoryController_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "Persistency.BaseDAO",
      "org.postgresql.util.SharedTimer",
      "org.postgresql.Driver",
      "org.postgresql.PGProperty",
      "org.postgresql.jdbc.PgConnection",
      "org.postgresql.core.v3.ConnectionFactoryImpl",
      "org.postgresql.hostchooser.HostRequirement$1",
      "org.postgresql.hostchooser.HostRequirement$2",
      "org.postgresql.hostchooser.HostRequirement$3",
      "org.postgresql.hostchooser.HostRequirement$4",
      "org.postgresql.hostchooser.HostRequirement",
      "org.postgresql.util.PSQLException",
      "org.postgresql.util.GT",
      "org.postgresql.util.PSQLState",
      "org.json.JSONObject"
    );
  }
}
